{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/config/index.js","webpack:///./src/index.js","webpack:///./src/models/message.js","webpack:///./src/mutations/message/createMessage.js","webpack:///./src/mutations/message/index.js","webpack:///./src/mutations/user/index.js","webpack:///./src/mutations/user/loginUser.js","webpack:///./src/queries/message/index.js","webpack:///./src/queries/message/messages.js","webpack:///./src/schema.js","webpack:///./src/subscriptions/message/index.js","webpack:///./src/subscriptions/message/messageCreated.js","webpack:///./src/topics/message/index.js","webpack:///./src/types/Message.js","webpack:///./src/types/User.js","webpack:///./src/utils/db.js","webpack:///./src/utils/permissions.js","webpack:///external \"apollo-server-express\"","webpack:///external \"dotenv\"","webpack:///external \"express\"","webpack:///external \"graphql-compose-mongoose\"","webpack:///external \"http\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"lodash\"","webpack:///external \"mongoose\"","webpack:///external \"mongoose-timestamp\""],"names":["dotenv","config","PORT","process","env","MONGODB_URI","USER","PASSWORD","JWT_SECRET","pubsub","PubSub","app","express","server","ApolloServer","schema","cors","playground","introspection","tracing","path","context","req","connection","token","headers","authorization","user","Promise","resolve","reject","jwt","verify","err","decoded","username","applyMiddleware","onHealthCheck","mongoose","readyState","httpServer","createServer","installSubscriptionHandlers","get","res","thing","one","catch","e","json","error","message","hello","listen","console","log","graphqlPath","subscriptionsPath","MessageSchema","Schema","text","type","String","lowercase","trim","required","collection","plugin","timestamps","index","createdAt","updatedAt","Message","model","MessageTC","composeWithMongoose","requireAuth","_","args","input","create","publish","MESSAGE_CREATED","messageCreated","Mutation","createMessage","loginUser","password","sign","Query","messages","find","exec","Root","gql","resolvers","merge","MessageQueries","UserMutations","MessageMutations","MessageSubscriptions","makeExecutableSchema","typeDefs","User","Subscription","subscribe","asyncIterator","global","connect","useNewUrlParser","useUnifiedTopology","set","then","db","isAuthedResolver","resolver","obj"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nexport const PORT = process.env.PORT || 4000;\r\nexport const MONGODB_URI =\r\n  process.env.MONGODB_URI ||\r\n  'mongodb+srv://chris:WAneUWcKpx6qo81|@cluster0.284ov.mongodb.net/nixi1?retryWrites=true&w=majority';\r\nexport const USER = process.env.USER || '';\r\nexport const PASSWORD = process.env.PASSWORD || '';\r\nexport const JWT_SECRET = process.env.JWT_SECRET || '';\r\n","import { createServer } from 'http';\r\nimport express from 'express';\r\nimport { ApolloServer, PubSub } from 'apollo-server-express';\r\nimport { PORT, JWT_SECRET } from './config';\r\nimport schema from './schema';\r\nimport mongoose from 'mongoose';\r\nimport './utils/db';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nexport const pubsub = new PubSub();\r\n\r\nconst app = express();\r\n\r\nconst server = new ApolloServer({\r\n  schema,\r\n  cors: true,\r\n  playground: process.env.NODE_ENV === 'development' ? true : false,\r\n  introspection: true,\r\n  tracing: true,\r\n  path: '/',\r\n  context: async ({ req, connection }) => {\r\n    if (connection) {\r\n      return connection.context;\r\n    }\r\n    const token = req.headers.authorization;\r\n\r\n    if (!token) {\r\n      return;\r\n    }\r\n\r\n    const user = await new Promise((resolve, reject) => {\r\n      if (!JWT_SECRET) {\r\n        return;\r\n      }\r\n      jwt.verify(token, JWT_SECRET, (err, decoded) => {\r\n        if (err) {\r\n          return reject(err);\r\n        }\r\n\r\n        resolve(decoded.username);\r\n      });\r\n    });\r\n\r\n    return { user };\r\n  },\r\n});\r\n\r\nserver.applyMiddleware({\r\n  app,\r\n  path: '/',\r\n  cors: true,\r\n  onHealthCheck: () =>\r\n    new Promise((resolve, reject) => {\r\n      if (mongoose.connection.readyState > 0) {\r\n        resolve();\r\n      } else {\r\n        reject();\r\n      }\r\n    }),\r\n});\r\n\r\nconst httpServer = createServer(app);\r\nserver.installSubscriptionHandlers(httpServer);\r\n\r\napp.get('/', async (req, res) => {\r\n  const thing = await Promise.resolve({ one: 'two' }) // async/await!\r\n    .catch((e) => res.json({ error: e.message }));\r\n  return res.json({ ...thing, hello: 'world' }); // object-rest-spread!\r\n});\r\n\r\nhttpServer.listen(PORT, () => {\r\n  console.log(\r\n    `> Server ready at http://localhost:${PORT}${server.graphqlPath}`\r\n  );\r\n  console.log(\r\n    `> Subscriptions ready at ws://localhost:${PORT}${server.subscriptionsPath}`\r\n  );\r\n});\r\n","import mongoose, { Schema } from 'mongoose';\r\nimport timestamps from 'mongoose-timestamp';\r\nimport { composeWithMongoose } from 'graphql-compose-mongoose';\r\n\r\nexport const MessageSchema = new Schema(\r\n  {\r\n    text: {\r\n      type: String,\r\n      lowercase: true,\r\n      trim: true,\r\n      required: true,\r\n    },\r\n  },\r\n  {\r\n    collection: 'messages',\r\n  }\r\n);\r\n\r\nMessageSchema.plugin(timestamps);\r\n\r\nMessageSchema.index({ createdAt: 1, updatedAt: 1 });\r\n\r\nexport const Message = mongoose.model('Message', MessageSchema);\r\nexport const MessageTC = composeWithMongoose(Message);\r\n","import MESSAGE_CREATED from '../../topics/message/index';\r\nimport { pubsub } from '../../index';\r\nimport { Message } from '../../models/message';\r\nimport { isAuthedResolver as requireAuth } from '../../utils/permissions';\r\n\r\nexport default requireAuth(async (_, args) => {\r\n  try {\r\n    const { text } = await args.input;\r\n    await Message.create({ text });\r\n    await pubsub.publish(MESSAGE_CREATED, { messageCreated: { text } });\r\n    return 'success';\r\n  } catch (e) {\r\n    return e.message;\r\n  }\r\n});\r\n","import createMessage from './createMessage';\r\n\r\nexport default {\r\n  Mutation: {\r\n    createMessage,\r\n  },\r\n};\r\n","import loginUser from './loginUser';\r\n\r\nexport default {\r\n  Mutation: {\r\n    loginUser,\r\n  },\r\n};\r\n","import jwt from 'jsonwebtoken';\r\nimport { USER, PASSWORD, JWT_SECRET } from '../../config';\r\n\r\nexport default (_, args) => {\r\n  const { username, password } = args.input;\r\n\r\n  if (username !== USER || password !== PASSWORD) {\r\n    return;\r\n  }\r\n\r\n  if (!JWT_SECRET) {\r\n    return;\r\n  }\r\n\r\n  const token = jwt.sign({ username }, JWT_SECRET, {});\r\n\r\n  return { token };\r\n};\r\n","import messages from './messages';\r\n\r\nexport default {\r\n  Query: {\r\n    messages,\r\n  },\r\n};\r\n","import { Message } from '../../models/message';\r\n\r\nexport default async (_, args) => await Message.find({}).exec();\r\n","import { makeExecutableSchema, gql } from 'apollo-server-express';\r\nimport { merge } from 'lodash';\r\n\r\nimport Message from './types/Message';\r\nimport User from './types/User';\r\n\r\nimport MessageQueries from './queries/message';\r\n\r\nimport MessageMutations from './mutations/message';\r\nimport UserMutations from './mutations/user';\r\n\r\nimport MessageSubscriptions from './subscriptions/message';\r\n\r\nconst Root = gql`\r\n  type Query {\r\n    _: Boolean\r\n  }\r\n  type Mutation {\r\n    _: Boolean\r\n  }\r\n  type Subscription {\r\n    _: Boolean\r\n  }\r\n  schema {\r\n    query: Query\r\n    mutation: Mutation\r\n    subscription: Subscription\r\n  }\r\n`;\r\n\r\nconst resolvers = merge(\r\n  {},\r\n\r\n  MessageQueries,\r\n\r\n  UserMutations,\r\n  MessageMutations,\r\n\r\n  MessageSubscriptions\r\n);\r\n\r\nconst schema = makeExecutableSchema({\r\n  typeDefs: [Root, User, Message],\r\n  resolvers,\r\n});\r\n\r\nexport default schema;\r\n","import messageCreated from './messageCreated';\r\n\r\nexport default {\r\n  Subscription: {\r\n    messageCreated,\r\n  },\r\n};\r\n","import { pubsub } from '../../index';\r\nimport MESSAGE_CREATED from '../../topics/message/index';\r\n\r\nexport default {\r\n  subscribe: () => pubsub.asyncIterator([MESSAGE_CREATED]),\r\n};\r\n","const MESSAGE_CREATED = 'MESSAGE_CREATED';\r\n\r\nexport default MESSAGE_CREATED;\r\n","import { gql } from 'apollo-server-express';\r\n\r\nexport default gql`\r\n  type Message {\r\n    text: String!\r\n  }\r\n  input createMessageInput {\r\n    text: String!\r\n  }\r\n  extend type Mutation {\r\n    createMessage(input: createMessageInput): String\r\n  }\r\n  extend type Subscription {\r\n    messageCreated: Message\r\n  }\r\n  extend type Query {\r\n    messages: [Message]\r\n  }\r\n`;\r\n","import { gql } from 'apollo-server-express';\r\n\r\nexport default gql`\r\n  type Token {\r\n    token: String\r\n  }\r\n  input LoginUserInput {\r\n    username: String!\r\n    password: String!\r\n  }\r\n  extend type Mutation {\r\n    loginUser(input: LoginUserInput): Token\r\n  }\r\n`;\r\n","import mongoose from 'mongoose';\r\nimport { MONGODB_URI } from '../config';\r\n\r\nmongoose.Promise = global.Promise;\r\n\r\nconst connection = mongoose.connect(MONGODB_URI, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n});\r\n\r\nmongoose.set('useCreateIndex', true);\r\n\r\nconnection\r\n  .then((db) => db)\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\nexport default connection;\r\n","export const isAuthedResolver = (resolver) => (obj, args, context) => {\r\n  if (!context.user) {\r\n    return;\r\n  }\r\n\r\n  return resolver(obj, args, context);\r\n};\r\n","module.exports = require(\"apollo-server-express\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"graphql-compose-mongoose\");","module.exports = require(\"http\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"lodash\");","module.exports = require(\"mongoose\");","module.exports = require(\"mongoose-timestamp\");"],"sourceRoot":""}